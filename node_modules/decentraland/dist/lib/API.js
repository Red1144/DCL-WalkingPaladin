"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const errors_1 = require("../utils/errors");
const land_1 = require("../utils/land");
const dclApiUrl = 'https://api.decentraland.org/v1';
const cache = new Map();
function request(url) {
    return __awaiter(this, void 0, void 0, function* () {
        const cached = cache.get(url);
        if (cached) {
            return cached;
        }
        try {
            const res = yield fetch(url);
            const json = yield res.json();
            cache.set(url, json);
            return json;
        }
        catch (e) {
            errors_1.fail(errors_1.ErrorType.API_ERROR, `Unable to fetch from Decentraland remote API: ${e.message}`);
        }
    });
}
class API {
    getEstateIdOfLand({ x, y }) {
        return __awaiter(this, void 0, void 0, function* () {
            const json = yield request(`${dclApiUrl}/parcels/${x}/${y}`);
            if (!json.data) {
                return;
            }
            return json.data.id;
        });
    }
    getEstateData(estateId) {
        return __awaiter(this, void 0, void 0, function* () {
            const json = yield request(`${dclApiUrl}/estates/${estateId}`);
            if (!json.data) {
                return;
            }
            return land_1.filterAndFillEmpty(json.data.data);
        });
    }
    getEstateOwner(estateId) {
        return __awaiter(this, void 0, void 0, function* () {
            const json = yield request(`${dclApiUrl}/estates/${estateId}`);
            if (!json.data) {
                return;
            }
            return json.data.owner;
        });
    }
    getLandOfEstate(estateId) {
        return __awaiter(this, void 0, void 0, function* () {
            const json = yield request(`${dclApiUrl}/estates/${estateId}`);
            if (!json.data) {
                return;
            }
            return json.data.data.parcels;
        });
    }
    getLandData({ x, y }) {
        return __awaiter(this, void 0, void 0, function* () {
            const json = yield request(`${dclApiUrl}/parcels/${x}/${y}`);
            if (!json.data) {
                return;
            }
            return land_1.filterAndFillEmpty(json.data.data);
        });
    }
    getLandOwner({ x, y }) {
        return __awaiter(this, void 0, void 0, function* () {
            const json = yield request(`${dclApiUrl}/parcels/${x}/${y}`);
            if (!json.data) {
                return;
            }
            return json.data.owner;
        });
    }
    getLandOf(owner) {
        return __awaiter(this, void 0, void 0, function* () {
            const json = yield request(`${dclApiUrl}/addresses/${owner}/parcels`);
            if (!json.data) {
                return;
            }
            return json.data.map(({ x, y }) => ({ x, y }));
        });
    }
    getEstatesOf(owner) {
        return __awaiter(this, void 0, void 0, function* () {
            const json = yield request(`${dclApiUrl}/addresses/${owner}/estates`);
            if (!json.data) {
                return;
            }
            return json.data.map(({ id }) => id);
        });
    }
}
exports.API = API;
