"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const types_1 = require("./types");
const SubsetMapping_1 = require("./SubsetMapping");
const Diff_1 = require("./Diff");
const ReplaceWholeTreeException_1 = require("./ReplaceWholeTreeException");
const deepEqual_1 = require("../utils/deepEqual");
// tslint:disable:no-console
const innerDone = Symbol('innerDone');
const outerDone = Symbol('outerDone');
let diffcount;
let foundAll = false;
/** Returns the elements conaining a .tag string property */
function filterHavingTag($) {
    return typeof $.tag === 'string';
}
/**
 * Returns element descriptors, it is an array used to identify the given node
 */
function elementDescriptors(el) {
    let output = [];
    output.push(el.tag);
    if (el.attrs) {
        if (el.attrs.key) {
            output.push(el.tag + '.' + el.attrs.key);
        }
        if (el.attrs.id) {
            output.push(el.tag + '#' + el.attrs.id);
        }
        if (el.attrs.src) {
            output.push(el.tag + '%' + el.attrs.src);
        }
    }
    return output;
}
function findUniqueDescriptors(list) {
    let uniqueDescriptors = {};
    let duplicateDescriptors = {};
    let node;
    let descriptors;
    let descriptor;
    let inUnique;
    let inDupes;
    for (let i = 0; i < list.length; i++) {
        node = list[i];
        descriptors = elementDescriptors(node);
        for (let j = 0; j < descriptors.length; j++) {
            descriptor = descriptors[j];
            inUnique = descriptor in uniqueDescriptors;
            inDupes = descriptor in duplicateDescriptors;
            if (!inUnique && !inDupes) {
                uniqueDescriptors[descriptor] = true;
            }
            else if (inUnique) {
                delete uniqueDescriptors[descriptor];
                duplicateDescriptors[descriptor] = true;
            }
        }
    }
    return uniqueDescriptors;
}
function uniqueInBoth(l1, l2) {
    let l1Unique = findUniqueDescriptors(l1);
    let l2Unique = findUniqueDescriptors(l2);
    let inBoth = {};
    let keys = Object.keys(l1Unique);
    let length = keys.length;
    let key;
    for (let i = 0; i < length; i++) {
        key = keys[i];
        if (l2Unique[key]) {
            inBoth[key] = true;
        }
    }
    return inBoth;
}
function removeDone(tree) {
    // @ts-ignore
    delete tree[outerDone];
    // @ts-ignore
    delete tree[innerDone];
    if (tree.children) {
        return tree.children.every(removeDone);
    }
    else {
        return true;
    }
}
function isEqual(e1, e2) {
    let e1Attributes;
    let e2Attributes;
    if (!['tag'].every(function (element) {
        if (e1[element] !== e2[element]) {
            return false;
        }
        return true;
    })) {
        return false;
    }
    if (Boolean(e1.attrs) !== Boolean(e2.attrs)) {
        return false;
    }
    if (Boolean(e1.children) !== Boolean(e2.children)) {
        return false;
    }
    if (e1.attrs) {
        e1Attributes = Object.keys(e1.attrs);
        e2Attributes = Object.keys(e2.attrs);
        if (e1Attributes.length !== e2Attributes.length) {
            return false;
        }
        if (!e1Attributes.every(function (attribute) {
            if (!deepEqual_1.deepEqual(e1.attrs[attribute], e2.attrs[attribute])) {
                return false;
            }
            return true;
        })) {
            return false;
        }
    }
    if (e1.children) {
        if (e1.children.filter(filterHavingTag).length !== e2.children.filter(filterHavingTag).length) {
            return false;
        }
        if (!e1.children.filter(filterHavingTag).every(function (childNode, index) {
            return isEqual(childNode, e2.children.filter(filterHavingTag)[index]);
        })) {
            return false;
        }
    }
    return true;
}
function roughlyEqual(e1, e2, uniqueDescriptors, sameSiblings, preventRecursion = false) {
    let childUniqueDescriptors;
    let nodeList1;
    let nodeList2;
    if (!e1 || !e2) {
        return false;
    }
    if (e1.tag !== e2.tag) {
        return false;
    }
    if (e1.tag in uniqueDescriptors) {
        return true;
    }
    if (e1.attrs && e2.attrs) {
        if (e1.attrs.id) {
            if (e1.attrs.id !== e2.attrs.id) {
                return false;
            }
            else {
                let idDescriptor = e1.tag + '#' + e1.attrs.id;
                if (idDescriptor in uniqueDescriptors) {
                    return true;
                }
            }
        }
        if (e1.attrs.key) {
            if (e1.attrs.key !== e2.attrs.key) {
                return false;
            }
            else {
                let keyDescriptor = e1.tag + '.' + e1.attrs.key;
                if (keyDescriptor in uniqueDescriptors) {
                    return true;
                }
            }
        }
        if (e1.attrs.src) {
            if (e1.attrs.src !== e2.attrs.src) {
                return false;
            }
            else {
                let keyDescriptor = e1.tag + '%' + e1.attrs.src;
                if (keyDescriptor in uniqueDescriptors) {
                    return true;
                }
            }
        }
    }
    if (sameSiblings) {
        return true;
    }
    nodeList1 = e1.children
        ? e1.children
            .slice()
            .filter(filterHavingTag)
            .reverse()
        : [];
    nodeList2 = e2.children
        ? e2.children
            .slice()
            .filter(filterHavingTag)
            .reverse()
        : [];
    if (nodeList1.length !== nodeList2.length) {
        return false;
    }
    if (preventRecursion) {
        return nodeList1.every(function (element, index) {
            return element.tag === nodeList2[index].tag;
        });
    }
    else {
        // note: we only allow one level of recursion at any depth. If 'preventRecursion'
        // was not set, we must explicitly force it to true for child iterations.
        childUniqueDescriptors = uniqueInBoth(nodeList1, nodeList2);
        return nodeList1.every(function (element, index) {
            return roughlyEqual(element, nodeList2[index], childUniqueDescriptors, true, true);
        });
    }
}
function cloneObj(obj) {
    //  TODO: Do we really need to clone here? Is it not enough to just return the original object?
    return JSON.parse(JSON.stringify(obj));
}
/**
 * based on https://en.wikibooks.org/wiki/Algorithm_implementation/Strings/Longest_common_substring#JavaScript
 */
function findCommonSubsets(c1, c2, marked1, marked2) {
    let lcsSize = 0;
    let index = [];
    let c1Length = c1.length;
    let c2Length = c2.length;
    let matches = Array.apply(null, new Array(c1Length + 1)).map(function () {
        return [];
    });
    // set up the matching table
    let uniqueDescriptors = uniqueInBoth(c1, c2);
    // If all of the elements are the same tag, id and class, then we can
    // consider them roughly the same even if they have a different number of
    // children. This will reduce removing and re-adding similar elements.
    let subsetsSame = c1Length === c2Length;
    let origin;
    let ret;
    let c1Index;
    let c2Index;
    let c1Element;
    let c2Element;
    if (subsetsSame) {
        c1.some(function (element, i) {
            let c1Desc = elementDescriptors(element);
            let c2Desc = elementDescriptors(c2[i]);
            if (c1Desc.length !== c2Desc.length) {
                subsetsSame = false;
                return true;
            }
            c1Desc.some(function (description, i) {
                if (description !== c2Desc[i]) {
                    subsetsSame = false;
                    return true;
                }
                return false;
            });
            if (!subsetsSame) {
                return true;
            }
            return false;
        });
    }
    // fill the matches with distance values
    for (c1Index = 0; c1Index < c1Length; c1Index++) {
        c1Element = c1[c1Index];
        for (c2Index = 0; c2Index < c2Length; c2Index++) {
            c2Element = c2[c2Index];
            if (!marked1[c1Index] &&
                !marked2[c2Index] &&
                roughlyEqual(c1Element, c2Element, uniqueDescriptors, subsetsSame)) {
                matches[c1Index + 1][c2Index + 1] = matches[c1Index][c2Index] ? matches[c1Index][c2Index] + 1 : 1;
                if (matches[c1Index + 1][c2Index + 1] >= lcsSize) {
                    lcsSize = matches[c1Index + 1][c2Index + 1];
                    index = [c1Index + 1, c2Index + 1];
                }
            }
            else {
                matches[c1Index + 1][c2Index + 1] = 0;
            }
        }
    }
    if (lcsSize === 0) {
        return undefined;
    }
    origin = [index[0] - lcsSize, index[1] - lcsSize];
    ret = new SubsetMapping_1.SubsetMapping(origin[0], origin[1]);
    ret.length = lcsSize;
    return ret;
}
/**
 * This should really be a predefined function in Array...
 */
function makeArray(n, v) {
    return Array.apply(null, new Array(n)).map(function () {
        return v;
    });
}
/**
 * Generate arrays that indicate which node belongs to which subset,
 * or whether it's actually an orphan node, existing in only one
 * of the two trees, rather than somewhere in both.
 *
 * So if t1 = <img><canvas><br>, t2 = <canvas><br><img>.
 * The longest subset is "<canvas><br>" (length 2), so it will group 0.
 * The second longest is "<img>" (length 1), so it will be group 1.
 * gaps1 will therefore be [1,0,0] and gaps2 [0,0,1].
 *
 * If an element is not part of any group, it will stay being 'true', which
 * is the initial value. For example:
 * t1 = <img><p></p><br><canvas>, t2 = <b></b><br><canvas><img>
 *
 * The "<p></p>" and "<b></b>" do only show up in one of the two and will
 * therefore be marked by "true". The remaining parts are parts of the
 * groups 0 and 1:
 * gaps1 = [1, true, 0, 0], gaps2 = [true, 0, 0, 1]
 *
 */
function getGapInformation(t1, t2, stable) {
    let gaps1 = t1.children
        ? makeArray(t1.children.filter(filterHavingTag).length, true)
        : [];
    let gaps2 = t2.children
        ? makeArray(t2.children.filter(filterHavingTag).length, true)
        : [];
    let group = 0;
    let length = stable.length;
    let i;
    let j;
    let endOld;
    let endNew;
    let subset;
    // give elements from the same subset the same group number
    for (i = 0; i < length; i++) {
        subset = stable[i];
        endOld = subset.oldValue + subset.length;
        endNew = subset.newValue + subset.length;
        for (j = subset.oldValue; j < endOld; j += 1) {
            gaps1[j] = group;
        }
        for (j = subset.newValue; j < endNew; j += 1) {
            gaps2[j] = group;
        }
        group += 1;
    }
    return {
        gaps1: gaps1,
        gaps2: gaps2
    };
}
/**
 * Find all matching subsets, based on immediate child differences only.
 */
function markSubTrees(oldTree, newTree) {
    // note: the child lists are views, and so update as we update old/newTree
    let oldChildren = oldTree.children ? oldTree.children.filter(filterHavingTag) : [];
    let newChildren = newTree.children ? newTree.children.filter(filterHavingTag) : [];
    let marked1 = makeArray(oldChildren.length, false);
    let marked2 = makeArray(newChildren.length, false);
    let subsets = [];
    let subset;
    let returnIndex = function (_, index) {
        return index;
    };
    let markBoth = function (i) {
        if (subset) {
            marked1[subset.oldValue + i] = true;
            marked2[subset.newValue + i] = true;
        }
    };
    let subsetArray;
    do {
        subset = findCommonSubsets(oldChildren, newChildren, marked1, marked2);
        if (subset) {
            subsets.push(subset);
            subsetArray = Array.apply(null, new Array(subset.length)).map(returnIndex);
            // TODO: this might be a for 0..subset.length
            for (let i = 0; i < subsetArray.length; i++) {
                markBoth(subsetArray[i]);
            }
        }
    } while (subset);
    return subsets;
}
class DiffDOM {
    constructor(options = {}) {
        this.options = options;
        this.tracker = [];
        this.t1Orig = undefined;
        this.t2Orig = undefined;
        this.debug = false;
        this.diffcap = 10; // Limit for how many diffs are accepting when debugging. Inactive when debug is false.
        this.maxDepth = false; // False or a numeral. If set to a numeral, limits the level of depth that the the diff mechanism looks for differences. If false, goes through the entire tree.
        this.maxChildCount = false; // False or a numeral. If set to a numeral, does not try to diff the contents of nodes with more children if there are more than maxChildCountDiffCount differences among child nodes.
        this.maxChildCountDiffCount = 3; // Numeral. See maxChildCount.
        this.filterOuterDiff = null;
        this.compress = false;
    }
    // ===== Create a diff =====
    diff(t1Node, t2Node) {
        diffcount = 0;
        if (this.debug) {
            this.t1Orig = t1Node;
            this.t2Orig = t2Node;
        }
        this.tracker = [];
        return this.findDiffs(t1Node, t2Node);
    }
    findDiffs(t1, t2) {
        let diffs;
        do {
            if (this.debug) {
                diffcount += 1;
                if (diffcount > this.diffcap) {
                    // tslint:disable-next-line
                    ;
                    window.diffError = [this.t1Orig, this.t2Orig];
                    throw new Error('surpassed diffcap:' + JSON.stringify(this.t1Orig) + ' -> ' + JSON.stringify(this.t2Orig));
                }
            }
            diffs = this.findNextDiff(t1, t2, []);
            if (diffs.length === 0) {
                // Last check if the elements really are the same now.
                // If not, remove all info about being done and start over.
                // Sometimes a node can be marked as done, but the creation of subsequent diffs means that it has to be changed again.
                if (!isEqual(t1, t2)) {
                    if (foundAll) {
                        console.error('Could not find remaining diffs!');
                        console.trace({ t1, t2 });
                    }
                    else {
                        foundAll = true;
                        removeDone(t1);
                        diffs = this.findNextDiff(t1, t2, []);
                    }
                }
            }
            if (diffs.length > 0) {
                foundAll = false;
                this.tracker.push(...diffs);
                this.applyVirtual(t1, diffs);
            }
        } while (diffs.length > 0);
        return this.tracker;
    }
    findNextDiff(t1, t2, route) {
        let diffs;
        let fdiffs;
        if (this.maxDepth && route.length > this.maxDepth) {
            return [];
        }
        // outer differences?
        if (!t1[outerDone]) {
            diffs = this.findOuterDiff(t1, t2, route);
            if (this.filterOuterDiff) {
                fdiffs = this.filterOuterDiff(t1, t2, diffs);
                if (fdiffs)
                    diffs = fdiffs;
            }
            if (diffs.length > 0) {
                // tslint:disable-next-line:semicolon
                ;
                t1[outerDone] = true;
                return diffs;
            }
            else {
                // tslint:disable-next-line:semicolon
                ;
                t1[outerDone] = true;
            }
        }
        // inner differences?
        if (!t1[innerDone]) {
            diffs = this.findInnerDiff(t1, t2, route);
            if (diffs.length > 0) {
                return diffs;
            }
            else {
                // tslint:disable-next-line:semicolon
                ;
                t1[innerDone] = true;
            }
        }
        // no differences
        return [];
    }
    findOuterDiff(t1, t2, route) {
        let diffs = [];
        let attr;
        let attr1;
        let attr2;
        let attrLength;
        let pos;
        let i;
        if (t1.tag !== t2.tag) {
            return [
                new Diff_1.Diff()
                    .setValue(types_1.Actions.action, types_1.Actions.replaceElement)
                    .setValue(types_1.Actions.oldValue, t1)
                    .setValue(types_1.Actions.newValue, cloneObj(t2))
                    .setValue(types_1.Actions.route, route)
            ];
        }
        let t1Children = t1.children.filter(filterHavingTag);
        let t2Children = t2.children.filter(filterHavingTag);
        if (this.maxChildCount &&
            t1Children &&
            t2Children &&
            t1Children.length > this.maxChildCount &&
            t2Children.length > this.maxChildCount) {
            let childNodesLength = t1Children.length < t2Children.length ? t1Children.length : t2Children.length;
            let childDiffCount = 0;
            let j = 0;
            while (childDiffCount < this.maxChildCountDiffCount && j < childNodesLength) {
                if (!isEqual(t1Children[j], t2Children[j])) {
                    childDiffCount++;
                }
                j++;
            }
            if (childDiffCount === this.maxChildCountDiffCount) {
                return [
                    new Diff_1.Diff()
                        .setValue(types_1.Actions.action, types_1.Actions.replaceElement)
                        .setValue(types_1.Actions.oldValue, cloneObj(t1))
                        .setValue(types_1.Actions.newValue, cloneObj(t2))
                        .setValue(types_1.Actions.route, route)
                ];
            }
        }
        attr1 = t1.attrs ? Object.keys(t1.attrs).sort() : [];
        attr2 = t2.attrs ? Object.keys(t2.attrs).sort() : [];
        attrLength = attr1.length;
        for (i = 0; i < attrLength; i++) {
            attr = attr1[i];
            pos = attr2.indexOf(attr);
            if (pos === -1) {
                diffs.push(new Diff_1.Diff()
                    .setValue(types_1.Actions.action, types_1.Actions.removeAttribute)
                    .setValue(types_1.Actions.route, route)
                    .setValue(types_1.Actions.name, attr));
            }
            else {
                attr2.splice(pos, 1);
                if (!deepEqual_1.deepEqual(t1.attrs[attr], t2.attrs[attr])) {
                    diffs.push(new Diff_1.Diff()
                        .setValue(types_1.Actions.action, types_1.Actions.modifyAttribute)
                        .setValue(types_1.Actions.route, route)
                        .setValue(types_1.Actions.name, attr)
                        .setValue(types_1.Actions.oldValue, t1.attrs[attr])
                        .setValue(types_1.Actions.newValue, t2.attrs[attr]));
                }
            }
        }
        attrLength = attr2.length;
        for (i = 0; i < attrLength; i++) {
            attr = attr2[i];
            diffs.push(new Diff_1.Diff()
                .setValue(types_1.Actions.action, types_1.Actions.addAttribute)
                .setValue(types_1.Actions.route, route)
                .setValue(types_1.Actions.name, attr));
        }
        return diffs;
    }
    findInnerDiff(t1, t2, route) {
        let subtrees = t1.children && t2.children ? markSubTrees(t1, t2) : [];
        let t1ChildNodes = t1.children ? t1.children.filter(filterHavingTag) : [];
        let t2ChildNodes = t2.children ? t2.children.filter(filterHavingTag) : [];
        let childNodesLengthDifference;
        let diffs = [];
        let index = 0;
        let last;
        let e1;
        let e2;
        let i;
        if (subtrees.length > 0) {
            /* One or more groups have been identified among the children of t1
             * and t2.
             */
            diffs = this.attemptGroupRelocation(t1, t2, subtrees, route);
            if (diffs.length > 0) {
                return diffs;
            }
        }
        /* 0 or 1 groups of similar child nodes have been found
         * for t1 and t2. 1 If there is 1, it could be a sign that the
         * contents are the same. When the number of groups is below 2,
         * t1 and t2 are made to have the same length and each of the
         * pairs of child nodes are diffed.
         */
        last = Math.max(t1ChildNodes.length, t2ChildNodes.length);
        if (t1ChildNodes.length !== t2ChildNodes.length) {
            childNodesLengthDifference = true;
        }
        for (i = 0; i < last; i += 1) {
            e1 = t1ChildNodes[i];
            e2 = t2ChildNodes[i];
            if (childNodesLengthDifference) {
                /* t1 and t2 have different amounts of children. Add
                 * and remove as necessary to obtain the same length */
                if (e1 && !e2) {
                    diffs.push(new Diff_1.Diff()
                        .setValue(types_1.Actions.action, types_1.Actions.removeElement)
                        .setValue(types_1.Actions.route, route.concat(index))
                        .setValue(types_1.Actions.element, e1));
                    index -= 1;
                }
                else if (e2 && !e1) {
                    diffs.push(new Diff_1.Diff()
                        .setValue(types_1.Actions.action, types_1.Actions.addElement)
                        .setValue(types_1.Actions.route, route.concat(index))
                        .setValue(types_1.Actions.element, cloneObj(e2)));
                }
            }
            /* We are now guaranteed that children e1 and e2 exist,
             * and that they can be diffed.
             */
            /* Diffs in child nodes should not affect the parent node,
             * so we let these diffs be submitted together with other
             * diffs.
             */
            if (e1 && e2) {
                diffs = diffs.concat(this.findNextDiff(e1, e2, route.concat(index)));
            }
            index += 1;
        }
        // tslint:disable-next-line:semicolon
        ;
        t1[innerDone] = true;
        return diffs;
    }
    attemptGroupRelocation(t1, t2, subtrees, route) {
        /* Either t1.children and t2.children have the same length, or
         * there are at least two groups of similar elements can be found.
         * attempts are made at equalizing t1 with t2. First all initial
         * elements with no group affiliation (gaps=true) are removed (if
         * only in t1) or added (if only in t2). Then the creation of a group
         * relocation diff is attempted.
        */
        let gapInformation = getGapInformation(t1, t2, subtrees);
        let gaps1 = gapInformation.gaps1;
        let gaps2 = gapInformation.gaps2;
        let shortest = Math.min(gaps1.length, gaps2.length);
        let destinationDifferent;
        let toGroup;
        let group;
        let node;
        let diffs = [];
        let index1;
        let index2;
        let j;
        let t1Children = t1.children.filter(filterHavingTag);
        let t2Children = t2.children.filter(filterHavingTag);
        for (index2 = 0, index1 = 0; index2 < shortest; index1 += 1, index2 += 1) {
            if (gaps1[index2] === true) {
                node = t1Children[index1];
                diffs.push(new Diff_1.Diff()
                    .setValue(types_1.Actions.action, types_1.Actions.removeElement)
                    .setValue(types_1.Actions.route, route.concat(index2))
                    .setValue(types_1.Actions.element, cloneObj(node)));
                gaps1.splice(index2, 1);
                shortest = Math.min(gaps1.length, gaps2.length);
                index2 -= 1;
            }
            else if (gaps2[index2] === true) {
                node = t2Children[index2];
                diffs.push(new Diff_1.Diff()
                    .setValue(types_1.Actions.action, types_1.Actions.addElement)
                    .setValue(types_1.Actions.route, route.concat(index2))
                    .setValue(types_1.Actions.element, cloneObj(node)));
                gaps1.splice(index2, 0, true);
                shortest = Math.min(gaps1.length, gaps2.length);
                index1 -= 1;
            }
            else if (gaps1[index2] !== gaps2[index2]) {
                if (diffs.length > 0) {
                    return diffs;
                }
                // group relocation
                group = subtrees[gaps1[index2]];
                toGroup = Math.min(group.newValue, t1Children.length - group.length);
                if (toGroup !== group.oldValue) {
                    // Check whether destination nodes are different than originating ones.
                    destinationDifferent = false;
                    for (j = 0; j < group.length; j += 1) {
                        if (!roughlyEqual(t1Children[toGroup + j], t1Children[group.oldValue + j], {}, false, true)) {
                            destinationDifferent = true;
                        }
                    }
                    if (destinationDifferent) {
                        return [
                            new Diff_1.Diff()
                                .setValue(types_1.Actions.action, types_1.Actions.relocateGroup)
                                .setValue(types_1.Actions.groupLength, group.length)
                                .setValue(types_1.Actions.from, group.oldValue)
                                .setValue(types_1.Actions.to, toGroup)
                                .setValue(types_1.Actions.route, route)
                        ];
                    }
                }
            }
        }
        return diffs;
    }
    // ===== Apply a virtual diff =====
    /** Patches a virtual tree using a list of diffs */
    applyVirtual(tree, diffs) {
        let length = diffs.length;
        if (length === 0) {
            return true;
        }
        for (let i = 0; i < length; i++) {
            let diff = diffs[i];
            this.applyVirtualDiff(tree, diff);
        }
        return true;
    }
    /** Gets a node in the virtual tree by a route */
    getFromVirtualRoute(tree, route) {
        let node = tree;
        let parentNode = undefined;
        let nodeIndex = 0;
        let newRoute = route.slice();
        while (newRoute.length > 0) {
            const ch = node.children.filter(filterHavingTag);
            if (!ch.length) {
                return undefined;
            }
            nodeIndex = newRoute.shift();
            parentNode = node;
            node = ch[nodeIndex];
        }
        return {
            node,
            parentNode,
            nodeIndex
        };
    }
    /** Patches a virtual tree using a diff */
    applyVirtualDiff(tree, diff) {
        let routeInfo = this.getFromVirtualRoute(tree, diff[types_1.Actions.route]);
        let node = routeInfo && routeInfo.node;
        let parentNode = routeInfo && routeInfo.parentNode;
        let nodeIndex = (routeInfo && routeInfo.nodeIndex) || 0;
        let newNode = undefined;
        switch (diff[types_1.Actions.action]) {
            case types_1.Actions.addElement:
                const route = diff[types_1.Actions.route].slice();
                const position = route.pop();
                const x = this.getFromVirtualRoute(tree, route);
                if (x) {
                    node = x.node;
                    newNode = cloneObj(diff[types_1.Actions.element]);
                    // @ts-ignore
                    newNode[outerDone] = true;
                    // @ts-ignore
                    newNode[innerDone] = true;
                    if (!node.children) {
                        node.children = [];
                    }
                    if (newNode) {
                        if (node.children[position]) {
                            node.children.splice(position, 0, newNode);
                        }
                        else {
                            node.children.push(newNode);
                        }
                    }
                }
                break;
            case types_1.Actions.addAttribute:
                if (!node)
                    throw new ReplaceWholeTreeException_1.ReplaceWholeTreeException();
                if (!node.attrs) {
                    node.attrs = {};
                }
                node.attrs[diff[types_1.Actions.name]] = diff[types_1.Actions.value];
                break;
            case types_1.Actions.modifyAttribute:
                if (!node)
                    throw new ReplaceWholeTreeException_1.ReplaceWholeTreeException();
                node.attrs[diff[types_1.Actions.name]] = diff[types_1.Actions.newValue];
                break;
            case types_1.Actions.removeAttribute:
                if (!node)
                    throw new ReplaceWholeTreeException_1.ReplaceWholeTreeException();
                delete node.attrs[diff[types_1.Actions.name]];
                break;
            case types_1.Actions.replaceElement:
                newNode = cloneObj(diff[types_1.Actions.newValue]);
                // @ts-ignore
                newNode[outerDone] = true;
                // @ts-ignore
                newNode[innerDone] = true;
                if (parentNode && newNode) {
                    parentNode.children[nodeIndex] = newNode;
                }
                else {
                    debugger;
                    throw new ReplaceWholeTreeException_1.ReplaceWholeTreeException();
                }
                break;
            case types_1.Actions.relocateGroup:
                if (node) {
                    const nodeArray = node.children.splice(diff[types_1.Actions.from], diff[types_1.Actions.groupLength]).reverse();
                    for (let i = 0; i < nodeArray.length; i++) {
                        node.children.splice(diff[types_1.Actions.to], 0, nodeArray[i]);
                    }
                }
                break;
            case types_1.Actions.removeElement:
                if (!parentNode)
                    throw new ReplaceWholeTreeException_1.ReplaceWholeTreeException();
                parentNode.children.splice(nodeIndex, 1);
                break;
            default:
                console.log('unknown action');
        }
        return undefined;
    }
}
exports.DiffDOM = DiffDOM;
//# sourceMappingURL=data:application/json;base64,